@startuml
class Humano {
+ void run()
+ void a√±adirComida(int)
+ comprobaPausado()
}

class Zombie {
+ void run()
+ boolean hayHumanosDisponibles()
+ void atacar()
+ void sumarContadorMuertes()
+ comprobarPausado()
+ realizarAtaque(Humano victima, int tiempo)
+ zombificar(HUmano victima, int tiempo)
+ generarZombie(String id)
}

class Mapa {
+ void run()
+ comprobarPausado()
+ actualizarEstadisticas()
}

class ZonaRiesgo {
+ void recolectarComida(Humano humano) throws killedHumanException
+ void entrarHumano(Humano humano)
+ void entrarZombie(Zombie zombie)
+ void salir(String id, boolean humano)
+ Humano elegirVictima()
}

class Tunel {
+ void esperarSeguro(Humano humano)
+ void esperarRiesgo(Humano humano) throws killedHumanException
+ void pasarTunel(Humano humano, boolean ladoSeguro) throws InterruptedException
}

class Comedor {
+ void comer(Humano humano)
+ void depositarComida(Humano humano)
}


class Descanso {
+ void descansar(Humano humano, int inf, int sup)
}

abstract class Refugio {
# void pasarTiempo(Humano humano, int inf, int sup)
# void entrarZona(LabelUpdateConcurrentHashMap<Humano> listaZona, Humano humano)
# void salirZona(LabelUpdateConcurrentHashMap<Humano> listaZona, String id)
}

class ZonaComun {
+prepararse(Humano humano)
}

class clienteRMI {
    + inicializarCliente(listener: clienteViewController)
    + pausarReanudar()
}

class clienteViewController implements Initializable, EstadisticasListener {
    + actualizarEstadisticas(est: Estadisticas)
    + initialize(url: URL, rb: ResourceBundle)
}

class mainCliente extends Application {
    + start(stage: Stage)
}

class mainApplication extends Application {
    + start(stage: Stage)
    + main(args: String[])
}

class mainViewController implements Initializable {
    + initialize(url: URL, rb: ResourceBundle)
}

class servidorRMI extends UnicastRemoteObject implements ServicioRMI {
    + inicializarServidor()
    + registrarListener(listener: EstadisticasListener)
    + pausarReanudar()
    + actualizarEstadisticas()
}



clienteRMI --> ServicioRMI : usa
clienteRMI --> clienteViewController : recibe listener
clienteViewController --> clienteRMI : contiene

mainCliente --> clienteRMI : crea y usa
mainCliente --> clienteViewController : crea y pasa

mainApplication --> servidorRMI : crea y usa
mainApplication --> mainViewController : crea
mainApplication --> Mapa : crea y pasa

mainViewController --> Mapa : contiene

servidorRMI --> EstadisticasListener : comunica
servidorRMI --> Mapa : contiene

Humano --> Mapa : usa
Mapa --> Comedor : contiene
Mapa --> ZonaComun : contiene
Mapa --> Descanso : contiene
Mapa ---> Zombie : crea
Mapa --> Humano : crea
Zombie --> Mapa : usa
Zombie --> Humano : ataca / zombifica
ZonaRiesgo --> Humano : usa
ZonaRiesgo --> Zombie : usa
Tunel --> Humano : utiliza
Tunel --> Mapa : referencia
Comedor --> Humano : utiliza
Descanso --> Humano : utiliza
Refugio --> Humano : usa
@enduml